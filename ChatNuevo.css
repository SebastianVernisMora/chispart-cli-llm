<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Asistente IA - Chat Cósmico</title>
    <style>
        :root {
            --primary-color: #9B6400;
            --secondary-color: #C8AFF0;
            --accent-color: #FFAFA5;
            --user-msg-color: #FFAFA5;
            --ai-msg-color: #C8AFF0;
            --text-on-dark: #FFFFFF;
            --text-color: #333333;
            --border-radius: 10px;
        }
        
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            display: flex;
            flex-direction: column;
            height: 100vh;
            color: var(--text-color);
            position: relative;
            background: linear-gradient(125deg, #000000, #1a0633, #270033, #330033);
        }
        
        /* Fondo cósmico */
        .cosmic-background {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            overflow: hidden;
        }
        
        /* Estrellas */
        .stars {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
        
        .stars:after {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: 
                radial-gradient(2px 2px at 20px 30px, #ffffff, rgba(0,0,0,0)),
                radial-gradient(2px 2px at 40px 70px, #ffffff, rgba(0,0,0,0)),
                radial-gradient(1px 1px at 90px 40px, #ffffff, rgba(0,0,0,0)),
                radial-gradient(1px 1px at 130px 80px, #ffffff, rgba(0,0,0,0)),
                radial-gradient(2px 2px at 160px 120px, #ffffff, rgba(0,0,0,0)),
                radial-gradient(1px 1px at 200px 160px, #ffffff, rgba(0,0,0,0)),
                radial-gradient(1px 1px at 240px 200px, #ffffff, rgba(0,0,0,0)),
                radial-gradient(2px 2px at 280px 80px, #ffffff, rgba(0,0,0,0)),
                radial-gradient(1px 1px at 320px 100px, #ffffff, rgba(0,0,0,0)),
                radial-gradient(1px 1px at 360px 150px, #ffffff, rgba(0,0,0,0)),
                radial-gradient(1px 1px at 400px 120px, #ffffff, rgba(0,0,0,0)),
                radial-gradient(2px 2px at 440px 210px, #ffffff, rgba(0,0,0,0)),
                radial-gradient(1px 1px at 480px 110px, #ffffff, rgba(0,0,0,0)),
                radial-gradient(1px 1px at 520px 180px, #ffffff, rgba(0,0,0,0)),
                radial-gradient(2px 2px at 560px 120px, #ffffff, rgba(0,0,0,0)),
                radial-gradient(1px 1px at 600px 20px, #ffffff, rgba(0,0,0,0));
            background-size: 600px 600px;
            background-repeat: repeat;
            animation: stars-animation 100s linear infinite;
        }
        
        @keyframes stars-animation {
            from { transform: translateY(0); }
            to { transform: translateY(-600px); }
        }
        
        /* Estrellas con brillo */
        .twinkling-stars {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
        
        .star {
            position: absolute;
            width: 2px;
            height: 2px;
            background-color: #fff;
            border-radius: 50%;
            animation: twinkle 4s infinite;
        }
        
        .star:nth-child(1) { top: 10%; left: 20%; animation-delay: 0s; }
        .star:nth-child(2) { top: 30%; left: 40%; animation-delay: 0.5s; }
        .star:nth-child(3) { top: 50%; left: 60%; animation-delay: 1s; }
        .star:nth-child(4) { top: 70%; left: 80%; animation-delay: 1.5s; }
        .star:nth-child(5) { top: 15%; left: 90%; animation-delay: 2s; }
        .star:nth-child(6) { top: 35%; left: 15%; animation-delay: 2.5s; }
        .star:nth-child(7) { top: 55%; left: 35%; animation-delay: 3s; }
        .star:nth-child(8) { top: 75%; left: 55%; animation-delay: 3.5s; }
        .star:nth-child(9) { top: 25%; left: 75%; animation-delay: 0.2s; }
        .star:nth-child(10) { top: 45%; left: 25%; animation-delay: 0.7s; }
        .star:nth-child(11) { top: 65%; left: 45%; animation-delay: 1.2s; }
        .star:nth-child(12) { top: 85%; left: 65%; animation-delay: 1.7s; }
        
        .star.large {
            width: 3px;
            height: 3px;
            box-shadow: 0 0 6px 1px rgba(255, 255, 255, 0.9);
        }
        
        @keyframes twinkle {
            0% { opacity: 0.2; }
            50% { opacity: 1; box-shadow: 0 0 8px 2px rgba(255, 255, 255, 0.8); }
            100% { opacity: 0.2; }
        }
        
        /* Nebulosa */
        .nebula {
            position: absolute;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(ellipse at 20% 30%, rgba(200, 175, 240, 0.15) 0%, rgba(0, 0, 0, 0) 50%),
                radial-gradient(ellipse at 80% 70%, rgba(255, 175, 165, 0.15) 0%, rgba(0, 0, 0, 0) 50%),
                radial-gradient(ellipse at 60% 20%, rgba(155, 100, 0, 0.1) 0%, rgba(0, 0, 0, 0) 50%);
            animation: nebula-drift 80s linear infinite;
        }
        
        @keyframes nebula-drift {
            0% { transform: rotate(0deg) scale(1); }
            50% { transform: rotate(180deg) scale(1.2); }
            100% { transform: rotate(360deg) scale(1); }
        }
        
        /* Meteoros ocasionales */
        .shooting-star {
            position: absolute;
            width: 100px;
            height: 1px;
            background: linear-gradient(to right, rgba(0, 0, 0, 0), #fff, rgba(0, 0, 0, 0));
            transform: rotate(45deg);
            animation: shooting 10s linear infinite;
            top: -10%;
            left: -10%;
            opacity: 0;
        }
        
        .shooting-star:nth-child(1) { animation-delay: 0s; }
        .shooting-star:nth-child(2) { animation-delay: 5s; }
        
        @keyframes shooting {
            0% {
                opacity: 0;
                transform: translateX(0) translateY(0) rotate(45deg);
            }
            1% {
                opacity: 1;
            }
            5% {
                opacity: 1;
                transform: translateX(500px) translateY(500px) rotate(45deg);
            }
            6%, 100% {
                opacity: 0;
                transform: translateX(500px) translateY(500px) rotate(45deg);
            }
        }
        
        /* Contenido del chat sin header */
        .chat-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            max-width: 800px;
            width: 100%;
            margin: 20px auto;
            padding: 20px;
            overflow: hidden;
            background: rgba(255, 255, 255, 0.15);
            backdrop-filter: blur(20px);
            border-radius: var(--border-radius);
            z-index: 10;
            box-shadow: 0 0 30px rgba(0, 0, 0, 0.3), 0 0 50px rgba(155, 100, 0, 0.1);
            position: relative;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 10px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        
        .message {
            padding: 12px 15px;
            border-radius: var(--border-radius);
            max-width: 80%;
            word-wrap: break-word;
            position: relative;
            animation: fadeIn 0.3s ease-in-out;
            color: var(--text-color);
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.15);
            backdrop-filter: blur(10px);
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .user-message {
            background: rgba(255, 175, 165, 0.6);
            align-self: flex-end;
            border-bottom-right-radius: 0;
            border: 1px solid rgba(255, 175, 165, 0.3);
            color: #2c1810;
            font-weight: 500;
        }
        
        .ai-message {
            background: rgba(200, 175, 240, 0.6);
            align-self: flex-start;
            border-bottom-left-radius: 0;
            border: 1px solid rgba(200, 175, 240, 0.3);
            color: #2a1f3d;
            font-weight: 500;
        }
        
        .typing-indicator {
            display: none;
            align-self: flex-start;
            background: rgba(200, 175, 240, 0.5);
            padding: 12px 15px;
            border-radius: var(--border-radius);
            margin-bottom: 10px;
            backdrop-filter: blur(10px);
        }
        
        .typing-indicator span {
            height: 8px;
            width: 8px;
            float: left;
            margin: 0 1px;
            background-color: var(--primary-color);
            display: block;
            border-radius: 50%;
            opacity: 0.4;
        }
        
        .typing-indicator span:nth-of-type(1) {
            animation: 1s blink infinite 0.3333s;
        }
        
        .typing-indicator span:nth-of-type(2) {
            animation: 1s blink infinite 0.6666s;
        }
        
        .typing-indicator span:nth-of-type(3) {
            animation: 1s blink infinite 0.9999s;
        }
        
        @keyframes blink {
            50% {
                opacity: 1;
            }
        }
        
        .chat-input-container {
            display: flex;
            padding: 15px 0;
            border-top: 1px solid rgba(200, 175, 240, 0.2);
            margin-top: 10px;
        }
        
        .chat-input {
            flex: 1;
            border: 1px solid rgba(200, 175, 240, 0.3);
            border-radius: var(--border-radius);
            padding: 12px 15px;
            outline: none;
            resize: none;
            height: 50px;
            font-size: 16px;
            background: rgba(255, 255, 255, 0.8);
            color: #333;
            backdrop-filter: blur(10px);
        }
        
        .chat-input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(155, 100, 0, 0.25);
            background: rgba(255, 255, 255, 0.9);
        }
        
        .send-button {
            border: none;
            background: rgba(155, 100, 0, 0.8);
            color: var(--text-on-dark);
            padding: 0 20px;
            border-radius: var(--border-radius);
            margin-left: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(155, 100, 0, 0.3);
            backdrop-filter: blur(10px);
        }
        
        .send-button:hover {
            background: rgba(199, 128, 0, 0.9);
            box-shadow: 0 6px 20px rgba(155, 100, 0, 0.5);
            transform: translateY(-2px);
        }
        
        .send-button:disabled {
            background: rgba(102, 102, 102, 0.6);
            cursor: not-allowed;
            box-shadow: none;
            transform: none;
        }
        
        @media (max-width: 768px) {
            .message {
                max-width: 90%;
            }
            
            .chat-container {
                margin: 10px;
                padding: 15px;
            }
        }
    </style>
</head>
<body>
    <!-- Fondo cósmico -->
    <div class="cosmic-background">
        <div class="stars"></div>
        <div class="nebula"></div>
        <div class="twinkling-stars">
            <div class="star large"></div>
            <div class="star"></div>
            <div class="star large"></div>
            <div class="star"></div>
            <div class="star"></div>
            <div class="star large"></div>
            <div class="star"></div>
            <div class="star"></div>
            <div class="star large"></div>
            <div class="star"></div>
            <div class="star"></div>
            <div class="star large"></div>
        </div>
        <div class="shooting-star"></div>
        <div class="shooting-star"></div>
    </div>

    <main class="chat-container">
        <div class="chat-messages" id="chat-messages">
            <!-- Los mensajes se añadirán aquí dinámicamente -->
            <div class="message ai-message">
                ¡Hola! Soy tu asistente IA cósmico. ¿En qué puedo ayudarte en esta aventura galáctica?
            </div>
        </div>
        
        <div class="typing-indicator" id="typing-indicator">
            <span></span>
            <span></span>
            <span></span>
        </div>
        
        <div class="chat-input-container">
            <textarea 
                class="chat-input" 
                id="user-input" 
                placeholder="Escribe un mensaje..." 
                rows="1"
                autofocus
            ></textarea>
            <button class="send-button" id="send-button">Enviar</button>
        </div>
    </main>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const chatMessages = document.getElementById('chat-messages');
            const userInput = document.getElementById('user-input');
            const sendButton = document.getElementById('send-button');
            const typingIndicator = document.getElementById('typing-indicator');
            
            // Auto-resize textarea
            userInput.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = (this.scrollHeight) + 'px';
            });
            
            // Send message on Enter key (but allow Shift+Enter for new lines)
            userInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });
            
            // Send message on button click
            sendButton.addEventListener('click', sendMessage);
            
            function sendMessage() {
                const message = userInput.value.trim();
                if (!message) return;
                
                // Add user message to chat
                addMessage(message, 'user');
                
                // Clear input
                userInput.value = '';
                userInput.style.height = 'auto';
                
                // Disable input while waiting for response
                userInput.disabled = true;
                sendButton.disabled = true;
                
                // Show typing indicator
                typingIndicator.style.display = 'block';
                
                // Scroll to bottom
                scrollToBottom();
                
                // Simulate AI response (replace with your actual API call)
                setTimeout(() => {
                    getAIResponse(message);
                }, 1000);
            }
            
            function getAIResponse(userMessage) {
                // This is where you would integrate with your actual AI backend
                // For now, we'll simulate a response
                
                // You would replace this with an actual fetch to your API
                // Example:
                /*
                fetch('your-api-endpoint', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ message: userMessage })
                })
                .then(response => response.json())
                .then(data => {
                    typingIndicator.style.display = 'none';
                    addMessage(data.response, 'ai');
                    userInput.disabled = false;
                    sendButton.disabled = false;
                    userInput.focus();
                })
                .catch(error => {
                    console.error('Error:', error);
                    typingIndicator.style.display = 'none';
                    addMessage('Lo siento, ha ocurrido un error al procesar tu mensaje.', 'ai');
                    userInput.disabled = false;
                    sendButton.disabled = false;
                    userInput.focus();
                });
                */
                
                // Simulate cosmic-themed responses
                let response;
                const lowercaseMsg = userMessage.toLowerCase();
                
                if (lowercaseMsg.includes('hola')) {
                    response = '¡Saludos, explorador del cosmos! ¿Qué misterios del universo te gustaría descubrir conmigo?';
                } else if (lowercaseMsg.includes('ayuda')) {
                    response = 'Estoy aquí como tu guía cósmico. Puedo ayudarte a navegar por las galaxias del conocimiento. ¿Hacia qué constelación de ideas quieres viajar?';
                } else if (lowercaseMsg.includes('gracias')) {
                    response = '¡Es un honor acompañarte en este viaje interestelar del aprendizaje!';
                } else if (lowercaseMsg.includes('espacio') || lowercaseMsg.includes('universo')) {
                    response = 'El universo es infinito y lleno de maravillas. Desde las galaxias más lejanas hasta los agujeros negros, hay tanto por explorar. ¿Qué aspecto del cosmos te fascina más?';
                } else {
                    response = 'Interesante mensaje recibido desde tu punto en el espacio-tiempo. Como tu asistente cósmico, estoy procesando tu consulta a través de las dimensiones del conocimiento...';
                }
                
                setTimeout(() => {
                    typingIndicator.style.display = 'none';
                    addMessage(response, 'ai');
                    userInput.disabled = false;
                    sendButton.disabled = false;
                    userInput.focus();
                }, 1500);
            }
            
            function addMessage(text, sender) {
                const messageDiv = document.createElement('div');
                messageDiv.classList.add('message');
                messageDiv.classList.add(sender === 'user' ? 'user-message' : 'ai-message');
                messageDiv.textContent = text;
                
                chatMessages.appendChild(messageDiv);
                scrollToBottom();
            }
            
            function scrollToBottom() {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
        });
    </script>
</body>
</html>

