#!/usr/bin/env python3
"""
Script de prueba para verificar las optimizaciones de Termux
Verifica que todas las funcionalidades est√©n funcionando correctamente
"""

import sys
import os
import importlib
from pathlib import Path

def test_imports():
    """Prueba que todos los m√≥dulos se importen correctamente"""
    print("üîç Probando imports...")
    
    modules_to_test = [
        'requests',
        'click', 
        'rich',
        'flask',
        'PIL',
        'dotenv',
        'termux_utils',
        'config',
        'utils',
        'api_client'
    ]
    
    results = {}
    for module in modules_to_test:
        try:
            importlib.import_module(module)
            results[module] = "‚úÖ"
        except ImportError as e:
            results[module] = f"‚ùå {str(e)}"
    
    for module, status in results.items():
        print(f"  {module}: {status}")
    
    return all("‚úÖ" in status for status in results.values())

def test_termux_utils():
    """Prueba las utilidades espec√≠ficas de Termux"""
    print("\nüîß Probando utilidades de Termux...")
    
    try:
        from termux_utils import (
            is_termux, get_termux_temp_dir, get_safe_temp_path,
            ensure_directory_exists, get_optimized_console_width,
            check_termux_dependencies, get_mobile_optimized_timeouts,
            optimize_file_size_limits
        )
        
        # Probar funciones b√°sicas
        print(f"  is_termux(): {is_termux()}")
        print(f"  temp_dir: {get_termux_temp_dir()}")
        print(f"  console_width: {get_optimized_console_width()}")
        
        # Probar creaci√≥n de directorio
        test_dir = get_safe_temp_path("test_dir")
        if ensure_directory_exists(test_dir):
            print(f"  ‚úÖ Directorio creado: {test_dir}")
            os.rmdir(test_dir)  # Limpiar
        else:
            print(f"  ‚ùå No se pudo crear directorio")
        
        # Probar configuraciones
        timeouts = get_mobile_optimized_timeouts()
        limits = optimize_file_size_limits()
        print(f"  ‚úÖ Timeouts: {timeouts}")
        print(f"  ‚úÖ L√≠mites: {limits}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Error: {str(e)}")
        return False

def test_config():
    """Prueba la configuraci√≥n optimizada"""
    print("\n‚öôÔ∏è Probando configuraci√≥n...")
    
    try:
        from config import (
            get_api_config, get_available_models, get_default_model,
            REQUEST_TIMEOUT, TERMUX_OPTIMIZATIONS, MOBILE_NETWORK_CONFIG
        )
        
        # Probar configuraci√≥n de API
        config = get_api_config('blackbox')
        print(f"  ‚úÖ Config API: {config['name']}")
        print(f"  ‚úÖ Timeout: {config.get('timeout', 'N/A')}")
        
        # Probar modelos
        models = get_available_models('blackbox')
        default_model = get_default_model('blackbox')
        print(f"  ‚úÖ Modelos disponibles: {len(models)}")
        print(f"  ‚úÖ Modelo por defecto: {default_model}")
        
        # Probar configuraciones espec√≠ficas
        print(f"  ‚úÖ Optimizaciones Termux: {len(TERMUX_OPTIMIZATIONS)} configuraciones")
        print(f"  ‚úÖ Config red m√≥vil: {len(MOBILE_NETWORK_CONFIG)} configuraciones")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Error: {str(e)}")
        return False

def test_utils():
    """Prueba las utilidades optimizadas"""
    print("\nüõ†Ô∏è Probando utilidades...")
    
    try:
        from utils import (
            encode_file_to_base64, create_image_data_url, 
            is_supported_image, is_supported_pdf,
            format_file_size, validate_file_size,
            PYMUPDF_AVAILABLE
        )
        
        # Probar validaciones de archivo
        print(f"  ‚úÖ PyMuPDF disponible: {PYMUPDF_AVAILABLE}")
        print(f"  ‚úÖ Imagen soportada (.jpg): {is_supported_image('test.jpg')}")
        print(f"  ‚úÖ PDF soportado (.pdf): {is_supported_pdf('test.pdf')}")
        
        # Probar formato de tama√±o
        size_str = format_file_size(1024 * 1024)  # 1MB
        print(f"  ‚úÖ Formato tama√±o: {size_str}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Error: {str(e)}")
        return False

def test_api_client():
    """Prueba el cliente API optimizado"""
    print("\nüåê Probando cliente API...")
    
    try:
        from api_client import UniversalAPIClient, APIError
        
        # Crear cliente de prueba (sin clave real)
        client = UniversalAPIClient("test_key", "https://api.test.com", "Test API")
        print(f"  ‚úÖ Cliente creado: {client.api_name}")
        
        # Probar manejo de errores
        try:
            # Esto deber√≠a fallar por clave inv√°lida
            client.chat_completions([{"role": "user", "content": "test"}], "test-model")
        except (APIError, Exception) as e:
            print(f"  ‚úÖ Manejo de errores funciona: {type(e).__name__}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Error: {str(e)}")
        return False

def test_files_exist():
    """Verifica que todos los archivos necesarios existan"""
    print("\nüìÅ Verificando archivos...")
    
    required_files = [
        'termux_utils.py',
        'install_termux.sh',
        'llm-cli',
        'llm-web', 
        'llm-status',
        'README_TERMUX.md',
        'requirements_termux.txt',
        'OPTIMIZACIONES_TERMUX.md',
        'blackbox_cli.py',
        'app.py',
        'config.py',
        'utils.py',
        'api_client.py'
    ]
    
    missing_files = []
    for file in required_files:
        if Path(file).exists():
            print(f"  ‚úÖ {file}")
        else:
            print(f"  ‚ùå {file} (faltante)")
            missing_files.append(file)
    
    return len(missing_files) == 0

def test_scripts_executable():
    """Verifica que los scripts sean ejecutables"""
    print("\nüîß Verificando permisos de scripts...")
    
    scripts = ['install_termux.sh', 'llm-cli', 'llm-web', 'llm-status']
    
    for script in scripts:
        if Path(script).exists():
            if os.access(script, os.X_OK):
                print(f"  ‚úÖ {script} (ejecutable)")
            else:
                print(f"  ‚ö†Ô∏è  {script} (no ejecutable)")
        else:
            print(f"  ‚ùå {script} (no existe)")
    
    return True

def main():
    """Funci√≥n principal de pruebas"""
    print("üöÄ Probando Optimizaciones de Termux para CLI Universal LLMs")
    print("=" * 60)
    
    tests = [
        ("Imports", test_imports),
        ("Utilidades Termux", test_termux_utils),
        ("Configuraci√≥n", test_config),
        ("Utilidades", test_utils),
        ("Cliente API", test_api_client),
        ("Archivos", test_files_exist),
        ("Scripts ejecutables", test_scripts_executable)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"\n‚ùå Error en {test_name}: {str(e)}")
            results.append((test_name, False))
    
    # Resumen final
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE PRUEBAS")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if result:
            passed += 1
    
    print(f"\nüéØ Resultado: {passed}/{total} pruebas pasaron")
    
    if passed == total:
        print("üéâ ¬°Todas las optimizaciones funcionan correctamente!")
        print("üöÄ El sistema est√° listo para usar en Termux")
    else:
        print("‚ö†Ô∏è  Algunas pruebas fallaron. Revisa los errores arriba.")
        print("üí° El sistema puede funcionar parcialmente")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)