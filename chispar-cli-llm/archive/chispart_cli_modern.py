#!/usr/bin/env python3
"""
Chispart CLI Modernizado - Interfaz Universal para LLMs
Versi√≥n completamente refactorizada con arquitectura modular
"""

import click
import sys
import os
from typing import Optional

# Importar componentes modernos
from core import ChispartCLIManager, CommandHandler, set_debug_mode
from ui.theme_manager import ThemeManager
from ui.components import console, create_panel
from config import AVAILABLE_APIS, DEFAULT_API

# Configuraci√≥n global
CONTEXT_SETTINGS = dict(
    help_option_names=['-h', '--help'],
    max_content_width=120
)

# Instancia global del gestor CLI
cli_manager = None

def get_cli_manager(debug: bool = False) -> ChispartCLIManager:
    """Obtiene o crea la instancia del gestor CLI"""
    global cli_manager
    if cli_manager is None:
        cli_manager = ChispartCLIManager(debug_mode=debug)
    return cli_manager

@click.group(context_settings=CONTEXT_SETTINGS)
@click.option('--debug', is_flag=True, help='Activar modo debug con informaci√≥n detallada')
@click.option('--theme', type=click.Choice(['neon', 'dark', 'light', 'retro']), 
              help='Tema de la interfaz')
@click.option('--api', '-a', type=click.Choice(['chispart']), 
              default=DEFAULT_API, help='API por defecto a utilizar')
@click.version_option(version="2.0.0", prog_name="Chispart CLI")
@click.pass_context
def cli(ctx, debug: bool, theme: Optional[str], api: str):
    """
    üöÄ Chispart CLI - Interfaz Universal para LLMs
    
    Una herramienta moderna y potente para interactuar con m√∫ltiples APIs de IA
    desde tu terminal, optimizada para m√≥viles y escritorio.
    
    \b
    Caracter√≠sticas principales:
    ‚Ä¢ Soporte para BlackboxAI/Chispart con m√∫ltiples modelos
    ‚Ä¢ Interfaz moderna con temas personalizables
    ‚Ä¢ Optimizado para Termux/Android
    ‚Ä¢ An√°lisis de im√°genes y PDFs
    ‚Ä¢ Modo interactivo avanzado
    ‚Ä¢ Historial persistente
    
    \b
    Ejemplos de uso:
      chispart chat "¬øCu√°l es la capital de Francia?"
      chispart imagen foto.jpg "Describe esta imagen"
      chispart pdf documento.pdf "Resume el contenido"
      chispart interactivo --api openai
    """
    # Configurar contexto
    ctx.ensure_object(dict)
    ctx.obj['debug'] = debug
    ctx.obj['api'] = api
    
    # Configurar debug mode globalmente
    set_debug_mode(debug)
    
    # Inicializar gestor CLI
    manager = get_cli_manager(debug)
    ctx.obj['manager'] = manager
    
    # Configurar tema si se especifica
    if theme:
        manager.theme_manager.set_theme(theme)
    
    # Configurar API actual
    manager.set_current_api(api)
    
    # Mostrar bienvenida solo para comando principal sin subcomandos
    if ctx.invoked_subcommand is None:
        manager.show_welcome()

@cli.command()
@click.argument('mensaje')
@click.option('--modelo', '-m', help='Modelo espec√≠fico a utilizar')
@click.option('--api', '-a', type=click.Choice(['chispart']), 
              help='API a utilizar (sobrescribe la configuraci√≥n global)')
@click.option('--no-guardar', is_flag=True, help='No guardar en historial')
@click.option('--stream', is_flag=True, help='Activar streaming de respuesta')
@click.pass_context
def chat(ctx, mensaje: str, modelo: Optional[str], api: Optional[str], 
         no_guardar: bool, stream: bool):
    """
    üí¨ Env√≠a un mensaje de texto a la API seleccionada
    
    \b
    Ejemplos:
      chispart chat "Expl√≠came la f√≠sica cu√°ntica"
      chispart chat "Escribe un poema" --modelo gpt-4
      chispart chat "¬øC√≥mo est√° el clima?" --api openai --stream
    """
    manager = ctx.obj['manager']
    api_name = api or ctx.obj['api']
    
    try:
        result = manager.command_handler.handle_chat(
            api_name=api_name,
            message=mensaje,
            model=modelo,
            save_history=not no_guardar,
            stream=stream
        )
        
        if not result["success"]:
            sys.exit(1)
            
    except Exception as e:
        console.print(f"[red]Error: {str(e)}[/red]")
        sys.exit(1)

@cli.command()
@click.argument('archivo', type=click.Path(exists=True))
@click.option('--prompt', '-p', default="¬øQu√© hay en esta imagen?", 
              help='Pregunta sobre la imagen')
@click.option('--modelo', '-m', help='Modelo espec√≠fico a utilizar')
@click.option('--api', '-a', type=click.Choice(['chispart']), 
              help='API a utilizar')
@click.option('--no-guardar', is_flag=True, help='No guardar en historial')
@click.pass_context
def imagen(ctx, archivo: str, prompt: str, modelo: Optional[str], 
           api: Optional[str], no_guardar: bool):
    """
    üñºÔ∏è Analiza una imagen con IA
    
    \b
    Formatos soportados: JPG, JPEG, PNG, WebP
    Tama√±o m√°ximo: 20MB
    
    \b
    Ejemplos:
      chispart imagen foto.jpg
      chispart imagen screenshot.png "Extrae el texto de esta imagen"
      chispart imagen ~/storage/shared/Pictures/imagen.jpg --api openai
    """
    manager = ctx.obj['manager']
    api_name = api or ctx.obj['api']
    
    try:
        result = manager.command_handler.handle_image_analysis(
            api_name=api_name,
            file_path=archivo,
            prompt=prompt,
            model=modelo,
            save_history=not no_guardar
        )
        
        if not result["success"]:
            sys.exit(1)
            
    except Exception as e:
        console.print(f"[red]Error: {str(e)}[/red]")
        sys.exit(1)

@cli.command()
@click.argument('archivo', type=click.Path(exists=True))
@click.option('--prompt', '-p', default="Resume el contenido de este documento", 
              help='Pregunta sobre el PDF')
@click.option('--modelo', '-m', help='Modelo espec√≠fico a utilizar')
@click.option('--api', '-a', type=click.Choice(['chispart']), 
              help='API a utilizar')
@click.option('--no-guardar', is_flag=True, help='No guardar en historial')
@click.pass_context
def pdf(ctx, archivo: str, prompt: str, modelo: Optional[str], 
        api: Optional[str], no_guardar: bool):
    """
    üìÑ Analiza un documento PDF con IA
    
    \b
    Caracter√≠sticas:
    ‚Ä¢ Extracci√≥n autom√°tica de texto
    ‚Ä¢ Soporte para documentos grandes (hasta 20MB)
    ‚Ä¢ Truncado inteligente para documentos muy largos
    
    \b
    Ejemplos:
      chispart pdf documento.pdf
      chispart pdf paper.pdf "¬øCu√°les son las conclusiones principales?"
      chispart pdf ~/storage/shared/Download/informe.pdf --modelo claude-3-sonnet
    """
    manager = ctx.obj['manager']
    api_name = api or ctx.obj['api']
    
    try:
        result = manager.command_handler.handle_pdf_analysis(
            api_name=api_name,
            file_path=archivo,
            prompt=prompt,
            model=modelo,
            save_history=not no_guardar
        )
        
        if not result["success"]:
            sys.exit(1)
            
    except Exception as e:
        console.print(f"[red]Error: {str(e)}[/red]")
        sys.exit(1)

@cli.command()
@click.option('--modelo', '-m', help='Modelo espec√≠fico a utilizar')
@click.option('--api', '-a', type=click.Choice(['chispart']), 
              help='API a utilizar')
@click.pass_context
def interactivo(ctx, modelo: Optional[str], api: Optional[str]):
    """
    üó£Ô∏è Inicia una sesi√≥n de chat interactiva
    
    \b
    Caracter√≠sticas:
    ‚Ä¢ Conversaci√≥n continua con contexto
    ‚Ä¢ Comandos especiales integrados
    ‚Ä¢ Estad√≠sticas de sesi√≥n en tiempo real
    ‚Ä¢ Historial persistente
    
    \b
    Comandos especiales en sesi√≥n:
      'salir', 'exit', 'quit' - Terminar sesi√≥n
      'limpiar', 'clear' - Limpiar contexto
      'stats' - Ver estad√≠sticas de sesi√≥n
    
    \b
    Ejemplos:
      chispart interactivo
      chispart interactivo --modelo gpt-4 --api openai
    """
    manager = ctx.obj['manager']
    api_name = api or ctx.obj['api']
    
    try:
        manager.command_handler.handle_interactive_session(
            api_name=api_name,
            model=modelo
        )
    except KeyboardInterrupt:
        console.print("\n[yellow]Sesi√≥n interrumpida. ¬°Hasta luego![/yellow]")
    except Exception as e:
        console.print(f"[red]Error: {str(e)}[/red]")
        sys.exit(1)

@cli.command()
@click.option('--limite', '-l', default=10, help='N√∫mero de conversaciones a mostrar')
@click.pass_context
def historial(ctx, limite: int):
    """
    üìö Muestra el historial de conversaciones
    
    \b
    Informaci√≥n mostrada:
    ‚Ä¢ Fecha y hora de cada conversaci√≥n
    ‚Ä¢ Tipo de interacci√≥n (chat, imagen, PDF)
    ‚Ä¢ API y modelo utilizados
    ‚Ä¢ Tokens consumidos
    ‚Ä¢ Contenido resumido
    
    \b
    Ejemplos:
      chispart historial
      chispart historial --limite 20
    """
    manager = ctx.obj['manager']
    manager.show_history(limite)

@cli.command()
@click.option('--api', '-a', type=click.Choice(['chispart']), 
              help='Mostrar modelos de una API espec√≠fica')
@click.pass_context
def modelos(ctx, api: Optional[str]):
    """
    ü§ñ Lista los modelos disponibles
    
    \b
    Informaci√≥n mostrada:
    ‚Ä¢ Nombre del modelo
    ‚Ä¢ ID interno del modelo
    ‚Ä¢ Modelo por defecto marcado
    ‚Ä¢ Descripci√≥n de capacidades
    
    \b
    Ejemplos:
      chispart modelos
      chispart modelos --api openai
      chispart modelos --api anthropic
    """
    manager = ctx.obj['manager']
    api_name = api or ctx.obj['api']
    manager.show_models(api_name)

@cli.command()
@click.pass_context
def estado(ctx):
    """
    üìä Muestra el estado detallado del sistema
    
    \b
    Informaci√≥n mostrada:
    ‚Ä¢ Estado de configuraci√≥n de todas las APIs
    ‚Ä¢ Estad√≠sticas de uso (comandos, tokens, etc.)
    ‚Ä¢ Informaci√≥n del entorno (Termux, tema, etc.)
    ‚Ä¢ Recomendaciones de optimizaci√≥n
    
    \b
    √ötil para:
    ‚Ä¢ Diagnosticar problemas de configuraci√≥n
    ‚Ä¢ Verificar el estado de las APIs
    ‚Ä¢ Monitorear el uso de tokens
    """
    manager = ctx.obj['manager']
    manager.show_status()

@cli.command()
@click.pass_context
def configurar(ctx):
    """
    ‚öôÔ∏è Ejecuta el asistente de configuraci√≥n interactivo
    
    \b
    El asistente te guiar√° para:
    ‚Ä¢ Configurar claves API de diferentes proveedores
    ‚Ä¢ Seleccionar tema de la interfaz
    ‚Ä¢ Optimizar configuraci√≥n para tu entorno
    ‚Ä¢ Verificar que todo funcione correctamente
    
    \b
    Recomendado para:
    ‚Ä¢ Primera instalaci√≥n
    ‚Ä¢ Agregar nuevas APIs
    ‚Ä¢ Cambiar configuraci√≥n existente
    """
    manager = ctx.obj['manager']
    
    try:
        success = manager.run_setup_wizard()
        if success:
            console.print("[green]‚úÖ Configuraci√≥n completada exitosamente[/green]")
        else:
            console.print("[yellow]‚ö†Ô∏è Configuraci√≥n cancelada[/yellow]")
    except Exception as e:
        console.print(f"[red]Error durante la configuraci√≥n: {str(e)}[/red]")
        sys.exit(1)

@cli.command()
@click.pass_context
def tema(ctx):
    """
    üé® Configura el tema de la interfaz
    
    \b
    Temas disponibles:
    ‚Ä¢ neon - Colores vibrantes estilo cyberpunk
    ‚Ä¢ dark - Tema oscuro elegante
    ‚Ä¢ light - Tema claro y limpio
    ‚Ä¢ retro - Estilo vintage terminal
    
    \b
    El tema se guarda autom√°ticamente y se aplica
    a todas las futuras sesiones de Chispart.
    """
    manager = ctx.obj['manager']
    
    try:
        success = manager.configure_theme()
        if success:
            console.print("[green]‚úÖ Tema configurado exitosamente[/green]")
        else:
            console.print("[yellow]‚ö†Ô∏è Configuraci√≥n de tema cancelada[/yellow]")
    except Exception as e:
        console.print(f"[red]Error configurando tema: {str(e)}[/red]")
        sys.exit(1)

@cli.command()
@click.option('--api', '-a', type=click.Choice(['chispart']), 
              required=True, help='API a establecer como actual')
@click.pass_context
def usar(ctx, api: str):
    """
    üîÑ Cambia la API por defecto
    
    \b
    Establece una API como la predeterminada para
    todos los comandos subsecuentes, a menos que
    se especifique otra con --api.
    
    \b
    Ejemplos:
      chispart usar --api openai
      chispart usar --api anthropic
      chispart usar --api groq
    """
    manager = ctx.obj['manager']
    
    if manager.set_current_api(api):
        console.print(f"[green]‚úÖ API por defecto cambiada a {api}[/green]")
    else:
        sys.exit(1)

@cli.command()
@click.pass_context
def version(ctx):
    """
    ‚ÑπÔ∏è Muestra informaci√≥n detallada de la versi√≥n
    """
    from ui.components import create_panel
    
    version_info = """
[bold]Chispart CLI v2.0.0[/bold]

[dim]Interfaz Universal para LLMs[/dim]
[dim]Arquitectura Modular Modernizada[/dim]

[blue]API Soportada:[/blue]
‚Ä¢ BlackboxAI/Chispart (GPT-4, Claude, Llama, Gemini, Mixtral, DeepSeek, Qwen)

[green]Caracter√≠sticas:[/green]
‚Ä¢ Interfaz moderna con temas
‚Ä¢ Optimizado para Termux/Android
‚Ä¢ An√°lisis de im√°genes y PDFs
‚Ä¢ Modo interactivo avanzado
‚Ä¢ Validaci√≥n robusta
‚Ä¢ Manejo de errores inteligente

[yellow]Desarrollado por:[/yellow]
Sebastian Vernis Mora
"""
    
    console.print(create_panel(
        version_info,
        title="Informaci√≥n de Versi√≥n",
        style="chispart.brand"
    ))

# Aliases para comandos comunes (shortcuts)
@cli.command(hidden=True)
@click.argument('mensaje')
@click.pass_context
def c(ctx, mensaje: str):
    """Alias para 'chat' - Env√≠o r√°pido de mensajes"""
    ctx.invoke(chat, mensaje=mensaje)

@cli.command(hidden=True)
@click.pass_context
def i(ctx):
    """Alias para 'interactivo' - Sesi√≥n r√°pida"""
    ctx.invoke(interactivo)

@cli.command(hidden=True)
@click.pass_context
def h(ctx):
    """Alias para 'historial' - Ver historial r√°pido"""
    ctx.invoke(historial)

@cli.command(hidden=True)
@click.pass_context
def s(ctx):
    """Alias para 'estado' - Estado r√°pido"""
    ctx.invoke(estado)

def main():
    """Funci√≥n principal de entrada"""
    try:
        cli()
    except KeyboardInterrupt:
        console.print("\n[yellow]‚ö†Ô∏è Operaci√≥n cancelada por el usuario[/yellow]")
        sys.exit(130)
    except Exception as e:
        if '--debug' in sys.argv:
            raise
        console.print(f"[red]‚ùå Error inesperado: {str(e)}[/red]")
        console.print("[dim]Usa --debug para ver m√°s detalles[/dim]")
        sys.exit(1)
    finally:
        # Cleanup si es necesario
        if cli_manager:
            cli_manager.cleanup()

if __name__ == "__main__":
    main()
