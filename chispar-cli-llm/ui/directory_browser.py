"""
Interfaz interactiva para navegaci√≥n y exploraci√≥n de directorios
"""

import os
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime

from rich.prompt import Prompt, Confirm, IntPrompt
from rich.tree import Tree
from rich.table import Table
from rich.panel import Panel
from rich.columns import Columns
from rich.text import Text

from .components import console, create_panel, create_table
from .theme_manager import get_theme
from .interactive import InteractivePrompt, MenuSelector
from core.directory_analyzer import directory_analyzer


class DirectoryBrowser:
    """Navegador interactivo de directorios con capacidades de an√°lisis"""
    
    def __init__(self):
        self.colors = get_theme()
        self.current_path = Path.cwd()
        self.history = [self.current_path]
        self.bookmarks = []
        self.analysis_cache = {}
    
    def start_interactive_session(self) -> None:
        """Inicia una sesi√≥n interactiva de navegaci√≥n de directorios"""
        console.print(create_panel(
            f"""
[{self.colors['primary']}]üóÇÔ∏è Navegador Interactivo de Directorios[/]

[{self.colors['dim']}]Comandos disponibles:[/]
[{self.colors['info']}]‚Ä¢ ls, dir - Listar contenido actual[/]
[{self.colors['info']}]‚Ä¢ cd <directorio> - Cambiar directorio[/]
[{self.colors['info']}]‚Ä¢ analizar - Analizar directorio actual[/]
[{self.colors['info']}]‚Ä¢ tree - Mostrar √°rbol de directorios[/]
[{self.colors['info']}]‚Ä¢ info - Informaci√≥n del directorio[/]
[{self.colors['info']}]‚Ä¢ bookmark - Guardar marcador[/]
[{self.colors['info']}]‚Ä¢ bookmarks - Ver marcadores[/]
[{self.colors['info']}]‚Ä¢ back - Volver atr√°s[/]
[{self.colors['info']}]‚Ä¢ home - Ir al directorio home[/]
[{self.colors['info']}]‚Ä¢ help - Mostrar ayuda[/]
[{self.colors['info']}]‚Ä¢ exit, quit - Salir[/]
""",
            title="üöÄ Navegador de Directorios",
            style="chispart.brand"
        ))
        
        self._show_current_location()
        
        while True:
            try:
                # Mostrar prompt con directorio actual
                current_dir = self.current_path.name or str(self.current_path)
                command = InteractivePrompt.ask(
                    f"[{self.colors['accent']}]{current_dir}[/] $"
                ).strip()
                
                if not command:
                    continue
                
                # Procesar comando
                if command.lower() in ['exit', 'quit', 'salir']:
                    console.print(f"[{self.colors['success']}]üëã ¬°Hasta luego![/]")
                    break
                
                self._process_command(command)
                
            except KeyboardInterrupt:
                console.print(f"\n[{self.colors['warning']}]Navegaci√≥n interrumpida. ¬°Hasta luego![/]")
                break
            except Exception as e:
                console.print(f"[{self.colors['error']}]‚ùå Error: {str(e)}[/]")
    
    def _process_command(self, command: str) -> None:
        """Procesa un comando del usuario"""
        parts = command.split()
        cmd = parts[0].lower()
        args = parts[1:] if len(parts) > 1 else []
        
        if cmd in ['ls', 'dir', 'list']:
            self._list_directory()
        elif cmd == 'cd':
            if args:
                self._change_directory(' '.join(args))
            else:
                self._change_directory(str(Path.home()))
        elif cmd == 'analizar':
            self._analyze_current_directory()
        elif cmd == 'tree':
            depth = int(args[0]) if args and args[0].isdigit() else 3
            self._show_directory_tree(depth)
        elif cmd == 'info':
            self._show_directory_info()
        elif cmd == 'bookmark':
            name = ' '.join(args) if args else None
            self._add_bookmark(name)
        elif cmd == 'bookmarks':
            self._show_bookmarks()
        elif cmd == 'back':
            self._go_back()
        elif cmd == 'home':
            self._change_directory(str(Path.home()))
        elif cmd == 'help':
            self._show_help()
        elif cmd == 'pwd':
            console.print(f"[{self.colors['info']}]{self.current_path}[/]")
        elif cmd == 'clear':
            console.clear()
        elif cmd.startswith('/') or cmd.startswith('~') or Path(cmd).exists():
            # Ruta directa
            self._change_directory(cmd)
        else:
            console.print(f"[{self.colors['error']}]‚ùå Comando no reconocido: {cmd}[/]")
            console.print(f"[{self.colors['dim']}]Usa 'help' para ver comandos disponibles[/]")
    
    def _list_directory(self, show_hidden: bool = False) -> None:
        """Lista el contenido del directorio actual"""
        try:
            items = list(self.current_path.iterdir())
            
            if not show_hidden:
                items = [item for item in items if not item.name.startswith('.')]
            
            # Separar directorios y archivos
            directories = [item for item in items if item.is_dir()]
            files = [item for item in items if item.is_file()]
            
            # Ordenar
            directories.sort(key=lambda x: x.name.lower())
            files.sort(key=lambda x: x.name.lower())
            
            # Crear tabla
            table = create_table(title=f"üìÅ Contenido de {self.current_path.name}")
            table.add_column("Tipo", width=6)
            table.add_column("Nombre", style=self.colors["primary"])
            table.add_column("Tama√±o", width=12, style=self.colors["dim"])
            table.add_column("Modificado", width=20, style=self.colors["dim"])
            
            # A√±adir directorios
            for directory in directories:
                try:
                    stat = directory.stat()
                    modified = datetime.fromtimestamp(stat.st_mtime).strftime("%Y-%m-%d %H:%M")
                    table.add_row(
                        "üìÅ DIR",
                        f"[{self.colors['accent']}]{directory.name}/[/]",
                        "-",
                        modified
                    )
                except (OSError, PermissionError):
                    table.add_row(
                        "üìÅ DIR",
                        f"[{self.colors['accent']}]{directory.name}/[/]",
                        "?",
                        "?"
                    )
            
            # A√±adir archivos
            for file in files:
                try:
                    stat = file.stat()
                    size = self._format_size(stat.st_size)
                    modified = datetime.fromtimestamp(stat.st_mtime).strftime("%Y-%m-%d %H:%M")
                    
                    # Determinar icono por extensi√≥n
                    icon = self._get_file_icon(file.suffix)
                    
                    table.add_row(
                        f"{icon} FILE",
                        file.name,
                        size,
                        modified
                    )
                except (OSError, PermissionError):
                    table.add_row(
                        "üìÑ FILE",
                        file.name,
                        "?",
                        "?"
                    )
            
            console.print(table)
            
            # Mostrar resumen
            console.print(f"\n[{self.colors['dim']}]üìä Total: {len(directories)} directorios, {len(files)} archivos[/]")
            
        except PermissionError:
            console.print(f"[{self.colors['error']}]‚ùå Sin permisos para listar {self.current_path}[/]")
        except Exception as e:
            console.print(f"[{self.colors['error']}]‚ùå Error listando directorio: {str(e)}[/]")
    
    def _change_directory(self, path: str) -> None:
        """Cambia al directorio especificado"""
        try:
            # Expandir ~ y resolver ruta
            new_path = Path(path).expanduser().resolve()
            
            if not new_path.exists():
                console.print(f"[{self.colors['error']}]‚ùå El directorio {path} no existe[/]")
                return
            
            if not new_path.is_dir():
                console.print(f"[{self.colors['error']}]‚ùå {path} no es un directorio[/]")
                return
            
            # Verificar permisos
            if not os.access(new_path, os.R_OK):
                console.print(f"[{self.colors['error']}]‚ùå Sin permisos de lectura para {path}[/]")
                return
            
            # Cambiar directorio
            self.history.append(self.current_path)
            self.current_path = new_path
            
            self._show_current_location()
            
        except Exception as e:
            console.print(f"[{self.colors['error']}]‚ùå Error cambiando directorio: {str(e)}[/]")
    
    def _analyze_current_directory(self) -> None:
        """Analiza el directorio actual"""
        console.print(f"[{self.colors['info']}]üîç Analizando {self.current_path.name}...[/]")
        
        try:
            # Verificar cache
            cache_key = str(self.current_path)
            if cache_key in self.analysis_cache:
                analysis = self.analysis_cache[cache_key]
                console.print(f"[{self.colors['dim']}]üìã Usando an√°lisis en cache[/]")
            else:
                # Realizar an√°lisis
                analysis = directory_analyzer.analyze_directory(
                    str(self.current_path),
                    max_depth=3,
                    analyze_content=True
                )
                self.analysis_cache[cache_key] = analysis
            
            # Mostrar resultados
            directory_analyzer.display_analysis_summary(analysis)
            
        except Exception as e:
            console.print(f"[{self.colors['error']}]‚ùå Error en an√°lisis: {str(e)}[/]")
    
    def _show_directory_tree(self, max_depth: int = 3) -> None:
        """Muestra el √°rbol de directorios"""
        console.print(f"[{self.colors['info']}]üå≥ √Årbol de {self.current_path.name} (profundidad: {max_depth})[/]")
        
        try:
            tree = Tree(
                f"[{self.colors['primary']}]üìÅ {self.current_path.name}[/]",
                style=self.colors["primary"]
            )
            
            self._build_tree_recursive(tree, self.current_path, max_depth, 0)
            console.print(tree)
            
        except Exception as e:
            console.print(f"[{self.colors['error']}]‚ùå Error generando √°rbol: {str(e)}[/]")
    
    def _build_tree_recursive(self, tree_node, directory: Path, max_depth: int, current_depth: int) -> None:
        """Construye el √°rbol de directorios recursivamente"""
        if current_depth >= max_depth:
            return
        
        try:
            items = sorted(directory.iterdir(), key=lambda x: (x.is_file(), x.name.lower()))
            
            for item in items:
                if item.name.startswith('.'):
                    continue
                
                if item.is_dir():
                    # A√±adir directorio
                    dir_node = tree_node.add(
                        f"[{self.colors['accent']}]üìÅ {item.name}/[/]",
                        style=self.colors["accent"]
                    )
                    
                    # Recursi√≥n para subdirectorios
                    if current_depth < max_depth - 1:
                        try:
                            self._build_tree_recursive(dir_node, item, max_depth, current_depth + 1)
                        except PermissionError:
                            dir_node.add(f"[{self.colors['error']}]‚ùå Sin permisos[/]")
                
                elif item.is_file():
                    # A√±adir archivo
                    icon = self._get_file_icon(item.suffix)
                    size = self._format_size(item.stat().st_size)
                    tree_node.add(
                        f"[{self.colors['dim']}]{icon} {item.name} ({size})[/]",
                        style=self.colors["dim"]
                    )
        
        except PermissionError:
            tree_node.add(f"[{self.colors['error']}]‚ùå Sin permisos para listar[/]")
    
    def _show_directory_info(self) -> None:
        """Muestra informaci√≥n detallada del directorio actual"""
        try:
            stat = self.current_path.stat()
            
            # Contar elementos
            total_items = 0
            total_files = 0
            total_dirs = 0
            total_size = 0
            
            for item in self.current_path.rglob('*'):
                total_items += 1
                if item.is_file():
                    total_files += 1
                    try:
                        total_size += item.stat().st_size
                    except (OSError, PermissionError):
                        pass
                elif item.is_dir():
                    total_dirs += 1
            
            # Informaci√≥n b√°sica
            info = f"""
[{self.colors['primary']}]üìÅ Directorio:[/] {self.current_path.name}
[{self.colors['info']}]üìç Ruta completa:[/] {self.current_path}
[{self.colors['info']}]üë§ Propietario:[/] {stat.st_uid}
[{self.colors['info']}]üîí Permisos:[/] {oct(stat.st_mode)[-3:]}
[{self.colors['info']}]üìÖ Modificado:[/] {datetime.fromtimestamp(stat.st_mtime).strftime('%Y-%m-%d %H:%M:%S')}

[{self.colors['success']}]üìä Estad√≠sticas:[/]
[{self.colors['dim']}]‚Ä¢ Total de elementos: {total_items}[/]
[{self.colors['dim']}]‚Ä¢ Archivos: {total_files}[/]
[{self.colors['dim']}]‚Ä¢ Directorios: {total_dirs}[/]
[{self.colors['dim']}]‚Ä¢ Tama√±o total: {self._format_size(total_size)}[/]
"""
            
            console.print(create_panel(
                info.strip(),
                title="‚ÑπÔ∏è Informaci√≥n del Directorio",
                style=self.colors["info"]
            ))
            
        except Exception as e:
            console.print(f"[{self.colors['error']}]‚ùå Error obteniendo informaci√≥n: {str(e)}[/]")
    
    def _add_bookmark(self, name: Optional[str] = None) -> None:
        """A√±ade un marcador del directorio actual"""
        if not name:
            name = InteractivePrompt.ask("Nombre del marcador", default=self.current_path.name)
        
        bookmark = {
            'name': name,
            'path': str(self.current_path),
            'created': datetime.now().isoformat()
        }
        
        # Verificar si ya existe
        existing = next((b for b in self.bookmarks if b['path'] == str(self.current_path)), None)
        if existing:
            if Confirm.ask(f"Ya existe un marcador para esta ruta. ¬øActualizar?"):
                existing['name'] = name
                existing['created'] = datetime.now().isoformat()
                console.print(f"[{self.colors['success']}]‚úÖ Marcador actualizado: {name}[/]")
            return
        
        self.bookmarks.append(bookmark)
        console.print(f"[{self.colors['success']}]‚úÖ Marcador a√±adido: {name}[/]")
    
    def _show_bookmarks(self) -> None:
        """Muestra los marcadores guardados"""
        if not self.bookmarks:
            console.print(f"[{self.colors['warning']}]üì≠ No hay marcadores guardados[/]")
            return
        
        table = create_table(title="üîñ Marcadores")
        table.add_column("#", width=3)
        table.add_column("Nombre", style=self.colors["primary"])
        table.add_column("Ruta", style=self.colors["dim"])
        table.add_column("Creado", width=20, style=self.colors["dim"])
        
        for i, bookmark in enumerate(self.bookmarks, 1):
            created = datetime.fromisoformat(bookmark['created']).strftime('%Y-%m-%d %H:%M')
            table.add_row(
                str(i),
                bookmark['name'],
                bookmark['path'],
                created
            )
        
        console.print(table)
        
        # Opci√≥n de navegar a marcador
        if Confirm.ask("¬øNavegar a un marcador?"):
            try:
                choice = IntPrompt.ask(
                    "N√∫mero de marcador",
                    choices=[str(i) for i in range(1, len(self.bookmarks) + 1)]
                )
                bookmark = self.bookmarks[choice - 1]
                self._change_directory(bookmark['path'])
            except (ValueError, IndexError):
                console.print(f"[{self.colors['error']}]‚ùå Selecci√≥n inv√°lida[/]")
    
    def _go_back(self) -> None:
        """Vuelve al directorio anterior"""
        if len(self.history) > 1:
            self.current_path = self.history.pop()
            self._show_current_location()
        else:
            console.print(f"[{self.colors['warning']}]‚ö†Ô∏è No hay directorio anterior[/]")
    
    def _show_current_location(self) -> None:
        """Muestra la ubicaci√≥n actual"""
        console.print(f"\n[{self.colors['info']}]üìç Ubicaci√≥n actual: [bold]{self.current_path}[/bold][/]")
    
    def _show_help(self) -> None:
        """Muestra la ayuda de comandos"""
        help_text = f"""
[{self.colors['primary']}]üÜò Comandos Disponibles:[/]

[{self.colors['accent']}]Navegaci√≥n:[/]
[{self.colors['dim']}]‚Ä¢ ls, dir - Listar contenido del directorio[/]
[{self.colors['dim']}]‚Ä¢ cd <directorio> - Cambiar a directorio[/]
[{self.colors['dim']}]‚Ä¢ back - Volver al directorio anterior[/]
[{self.colors['dim']}]‚Ä¢ home - Ir al directorio home[/]
[{self.colors['dim']}]‚Ä¢ pwd - Mostrar directorio actual[/]

[{self.colors['accent']}]An√°lisis:[/]
[{self.colors['dim']}]‚Ä¢ analizar - Analizar directorio actual[/]
[{self.colors['dim']}]‚Ä¢ tree [profundidad] - Mostrar √°rbol (def: 3)[/]
[{self.colors['dim']}]‚Ä¢ info - Informaci√≥n detallada[/]

[{self.colors['accent']}]Marcadores:[/]
[{self.colors['dim']}]‚Ä¢ bookmark [nombre] - Guardar marcador[/]
[{self.colors['dim']}]‚Ä¢ bookmarks - Ver y navegar marcadores[/]

[{self.colors['accent']}]Utilidades:[/]
[{self.colors['dim']}]‚Ä¢ clear - Limpiar pantalla[/]
[{self.colors['dim']}]‚Ä¢ help - Mostrar esta ayuda[/]
[{self.colors['dim']}]‚Ä¢ exit, quit - Salir del navegador[/]

[{self.colors['warning']}]üí° Tip:[/] Tambi√©n puedes escribir rutas directas como /home/user o ~/Documents
"""
        
        console.print(create_panel(
            help_text.strip(),
            title="üìö Ayuda del Navegador",
            style="chispart.brand"
        ))
    
    def _get_file_icon(self, extension: str) -> str:
        """Obtiene el icono apropiado para un tipo de archivo"""
        icons = {
            '.py': 'üêç',
            '.js': 'üìú',
            '.ts': 'üìò',
            '.html': 'üåê',
            '.css': 'üé®',
            '.json': 'üìã',
            '.md': 'üìù',
            '.txt': 'üìÑ',
            '.pdf': 'üìï',
            '.jpg': 'üñºÔ∏è',
            '.jpeg': 'üñºÔ∏è',
            '.png': 'üñºÔ∏è',
            '.gif': 'üñºÔ∏è',
            '.mp4': 'üé¨',
            '.mp3': 'üéµ',
            '.zip': 'üì¶',
            '.tar': 'üì¶',
            '.gz': 'üì¶',
            '.exe': '‚öôÔ∏è',
            '.sh': '‚ö°',
            '.bat': '‚ö°',
        }
        
        return icons.get(extension.lower(), 'üìÑ')
    
    def _format_size(self, size_bytes: int) -> str:
        """Formatea el tama√±o en bytes a una representaci√≥n legible"""
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size_bytes < 1024.0:
                return f"{size_bytes:.1f}{unit}"
            size_bytes /= 1024.0
        return f"{size_bytes:.1f}TB"


# Instancia global del navegador
directory_browser = DirectoryBrowser()
