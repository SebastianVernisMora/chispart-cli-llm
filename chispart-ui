#!/bin/bash

# üöÄ Chispart-CLI-LLM - Interfaz Web Autom√°tica
# Lanzador inteligente de interfaz web con navegador autom√°tico

# Detectar la ubicaci√≥n del script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Si estamos en ~/bin, el proyecto deber√≠a estar en ~/chispart-cli-llm
if [[ "$SCRIPT_DIR" == *"/bin" ]]; then
    PROJECT_DIR="$HOME/chispart-cli-llm"
else
    PROJECT_DIR="$SCRIPT_DIR"
fi

# Verificar que el proyecto existe
if [ ! -f "$PROJECT_DIR/app.py" ]; then
    echo "‚ùå Error: No se encontr√≥ Chispart-CLI-LLM"
    echo "   Esperado en: $PROJECT_DIR"
    exit 1
fi

cd "$PROJECT_DIR"

# Colores Ne√≥n para output (tema oscuro optimizado)
RED='\033[38;2;255;136;136m'      # Rojo Ne√≥n
GREEN='\033[38;2;0;255;136m'       # Verde Manzana Ne√≥n
YELLOW='\033[38;2;255;255;136m'    # Amarillo Ne√≥n
BLUE='\033[38;2;136;255;255m'      # Cian Ne√≥n
PURPLE='\033[38;2;187;136;255m'    # Lila Ne√≥n
CYAN='\033[38;2;136;255;255m'      # Cian Ne√≥n
PINK='\033[38;2;255;136;187m'      # Rosa Ne√≥n
NC='\033[0m' # No Color

print_header() {
    echo -e "${PURPLE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo -e "‚ïë                ${GREEN}üöÄ Chispart-CLI-LLM${PURPLE} ${PINK}Web UI${PURPLE}                   ‚ïë"
    echo -e "‚ïë            ${CYAN}Universal LLM Terminal for Mobile${PURPLE}                ‚ïë"
    echo -e "‚ïë                    ${YELLOW}‚ú® Ne√≥n Powered ‚ú®${PURPLE}                        ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

print_status() {
    echo -e "${CYAN}‚ÑπÔ∏è [INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}‚úÖ [SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è [WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}‚ùå [ERROR]${NC} $1"
}

# Funci√≥n para detectar si estamos en Termux
is_termux() {
    [ -d "/data/data/com.termux" ] || [[ "$PREFIX" == *"com.termux"* ]]
}

# Funci√≥n para obtener la IP local
get_local_ip() {
    if command -v ip >/dev/null 2>&1; then
        ip route get 1.1.1.1 2>/dev/null | grep -oP 'src \K\S+' || echo "localhost"
    elif command -v hostname >/dev/null 2>&1; then
        hostname -I 2>/dev/null | awk '{print $1}' || echo "localhost"
    else
        echo "localhost"
    fi
}

# Funci√≥n para abrir el navegador autom√°ticamente
open_browser() {
    local url="$1"
    
    if is_termux; then
        # En Termux, usar termux-open-url si est√° disponible
        if command -v termux-open-url >/dev/null 2>&1; then
            print_status "Abriendo navegador autom√°ticamente..."
            termux-open-url "$url" 2>/dev/null &
            return 0
        fi
    else
        # En sistemas Linux/Unix est√°ndar
        if command -v xdg-open >/dev/null 2>&1; then
            xdg-open "$url" 2>/dev/null &
            return 0
        elif command -v open >/dev/null 2>&1; then  # macOS
            open "$url" 2>/dev/null &
            return 0
        fi
    fi
    
    return 1
}

# Funci√≥n para crear el servicio persistente
create_persistent_service() {
    if is_termux; then
        # Crear script de servicio para Termux
        cat > "$HOME/.chispart-ui-service.sh" << 'EOF'
#!/bin/bash
# Servicio persistente para Chispart-CLI-LLM UI

PROJECT_DIR="$HOME/chispart-cli-llm"
LOG_FILE="$HOME/.chispart-ui.log"
PID_FILE="$HOME/.chispart-ui.pid"

start_service() {
    if [ -f "$PID_FILE" ] && kill -0 "$(cat "$PID_FILE")" 2>/dev/null; then
        echo "Servicio ya est√° ejecut√°ndose (PID: $(cat "$PID_FILE"))"
        return 1
    fi
    
    cd "$PROJECT_DIR"
    nohup python3 app.py > "$LOG_FILE" 2>&1 &
    echo $! > "$PID_FILE"
    echo "Servicio iniciado (PID: $!)"
    return 0
}

stop_service() {
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            kill "$pid"
            rm -f "$PID_FILE"
            echo "Servicio detenido"
        else
            rm -f "$PID_FILE"
            echo "Servicio no estaba ejecut√°ndose"
        fi
    else
        echo "Archivo PID no encontrado"
    fi
}

status_service() {
    if [ -f "$PID_FILE" ] && kill -0 "$(cat "$PID_FILE")" 2>/dev/null; then
        echo "Servicio ejecut√°ndose (PID: $(cat "$PID_FILE"))"
        return 0
    else
        echo "Servicio no est√° ejecut√°ndose"
        return 1
    fi
}

case "$1" in
    start)
        start_service
        ;;
    stop)
        stop_service
        ;;
    restart)
        stop_service
        sleep 2
        start_service
        ;;
    status)
        status_service
        ;;
    *)
        echo "Uso: $0 {start|stop|restart|status}"
        exit 1
        ;;
esac
EOF
        
        chmod +x "$HOME/.chispart-ui-service.sh"
        print_success "Servicio persistente creado en $HOME/.chispart-ui-service.sh"
    fi
}

# Funci√≥n para verificar dependencias
check_dependencies() {
    print_status "Verificando dependencias..."
    
    if ! python3 -c "import flask" 2>/dev/null; then
        print_error "Flask no est√° instalado"
        print_status "Instalando Flask..."
        pip install flask
    fi
    
    if ! python3 -c "import requests, click, rich" 2>/dev/null; then
        print_error "Dependencias faltantes"
        print_status "Ejecuta: pip install -r requirements.txt"
        return 1
    fi
    
    print_success "Dependencias verificadas"
    return 0
}

# Funci√≥n principal
main() {
    print_header
    
    # Verificar dependencias
    if ! check_dependencies; then
        exit 1
    fi
    
    # Obtener IP local
    LOCAL_IP=$(get_local_ip)
    PORT=5000
    
    # URLs de acceso
    LOCAL_URL="http://localhost:$PORT"
    NETWORK_URL="http://$LOCAL_IP:$PORT"
    
    # Mostrar informaci√≥n
    echo -e "${CYAN}üåê Configuraci√≥n de Acceso:${NC}"
    echo -e "   ${GREEN}üì± Local:${NC}    $LOCAL_URL"
    echo -e "   ${PINK}üåç Red:${NC}      $NETWORK_URL"
    echo ""
    
    if is_termux; then
        echo -e "${YELLOW}üì± Optimizaciones para Termux:${NC}"
        echo -e "   ${GREEN}‚Ä¢${NC} Configuraci√≥n optimizada para m√≥viles"
        echo -e "   ${GREEN}‚Ä¢${NC} Timeouts ajustados para conexiones lentas"
        echo -e "   ${GREEN}‚Ä¢${NC} Interfaz adaptativa para pantallas peque√±as"
        echo -e "   ${GREEN}‚Ä¢${NC} Colores ne√≥n para mejor visibilidad"
        echo ""
        
        # Crear servicio persistente
        create_persistent_service
        
        echo -e "${CYAN}üîß Comandos de servicio disponibles:${NC}"
        echo "   ~/.chispart-ui-service.sh start    # Iniciar servicio"
        echo "   ~/.chispart-ui-service.sh stop     # Detener servicio"
        echo "   ~/.chispart-ui-service.sh restart  # Reiniciar servicio"
        echo "   ~/.chispart-ui-service.sh status   # Ver estado"
        echo ""
    fi
    
    echo -e "${GREEN}üí° Consejos:${NC}"
    echo "   ‚Ä¢ Mant√©n la pantalla encendida para evitar que se cierre"
    echo "   ‚Ä¢ Puedes acceder desde otros dispositivos en la misma red WiFi"
    echo "   ‚Ä¢ Usa Ctrl+C para detener el servidor"
    if is_termux; then
        echo "   ‚Ä¢ El servicio persistente seguir√° funcionando aunque cierres Termux"
    fi
    echo ""
    
    # Configurar variables de entorno para optimizar Flask
    export FLASK_ENV=production
    export FLASK_DEBUG=false
    
    # Intentar abrir el navegador autom√°ticamente
    if open_browser "$LOCAL_URL"; then
        print_success "Navegador abierto autom√°ticamente"
    else
        print_warning "No se pudo abrir el navegador autom√°ticamente"
        echo "   Abre manualmente: $LOCAL_URL"
    fi
    
    echo ""
    print_status "Iniciando servidor web..."
    echo -e "${YELLOW}üõë Presiona Ctrl+C para detener${NC}"
    echo ""
    
    # Iniciar la aplicaci√≥n web
    python3 app.py
}

# Manejar argumentos de l√≠nea de comandos
case "${1:-}" in
    --help|-h)
        echo "üöÄ Chispart-CLI-LLM Web UI - Lanzador de Interfaz Web"
        echo ""
        echo "Uso: chispart-ui [opciones]"
        echo ""
        echo "Opciones:"
        echo "  --help, -h          Mostrar esta ayuda"
        echo "  --service-start     Iniciar como servicio persistente (solo Termux)"
        echo "  --service-stop      Detener servicio persistente (solo Termux)"
        echo "  --service-status    Ver estado del servicio (solo Termux)"
        echo "  --no-browser        No abrir navegador autom√°ticamente"
        echo ""
        echo "Ejemplos:"
        echo "  chispart-ui                    # Iniciar normalmente"
        echo "  chispart-ui --service-start    # Iniciar como servicio"
        echo "  chispart-ui --no-browser       # Iniciar sin abrir navegador"
        exit 0
        ;;
    --service-start)
        if is_termux && [ -f "$HOME/.chispart-ui-service.sh" ]; then
            "$HOME/.chispart-ui-service.sh" start
        else
            print_error "Servicio persistente solo disponible en Termux"
            exit 1
        fi
        exit 0
        ;;
    --service-stop)
        if is_termux && [ -f "$HOME/.chispart-ui-service.sh" ]; then
            "$HOME/.chispart-ui-service.sh" stop
        else
            print_error "Servicio persistente solo disponible en Termux"
            exit 1
        fi
        exit 0
        ;;
    --service-status)
        if is_termux && [ -f "$HOME/.chispart-ui-service.sh" ]; then
            "$HOME/.chispart-ui-service.sh" status
        else
            print_error "Servicio persistente solo disponible en Termux"
            exit 1
        fi
        exit 0
        ;;
    --no-browser)
        # Deshabilitar apertura autom√°tica del navegador
        open_browser() { return 1; }
        main
        ;;
    "")
        main
        ;;
    *)
        print_error "Opci√≥n desconocida: $1"
        echo "Usa 'chispart-ui --help' para ver las opciones disponibles"
        exit 1
        ;;
esac